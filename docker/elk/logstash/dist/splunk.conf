# Input section

input {



    # Fatt                                   

    file {

        path => ["/data/fatt/log/fatt.log"]

        # codec => json

        type => "Fatt"

    }



    # Suricata

    file {

        path => ["/data/suricata/log/eve.json"]

        # codec => json

        type => "Suricata"

    }



    # P0f

    file {

        path => ["/data/p0f/log/p0f.json"]

        # codec => json

        type => "P0f"

    }



    # Adbhoney

    file {

        path => ["/data/adbhoney/log/adbhoney.json"]

        # codec => json

        type => "Adbhoney"

    }



    # Ciscoasa

    # file {

    #     path => ["/data/ciscoasa/log/ciscoasa.log"]

    #     # codec => plain

    #     type => "Ciscoasa"

    # }



    # CitrixHoneypot

    # file {

    #     path => ["/data/citrixhoneypot/logs/server.log"]

    #     # codec => json

    #     type => "CitrixHoneypot"

    # }



    # Conpot

    file {

        path => ["/data/conpot/log/*.json"]

        # codec => json

        type => "ConPot"

    }



    # Cowrie

    file {

        path => ["/data/cowrie/log/cowrie.json"]

        # codec => json

        type => "Cowrie"

    }



    # Dionaea

    file {

        path => ["/data/dionaea/log/dionaea.json"]

        # codec => json

        type => "Dionaea"

    }



    # Dicompot

    file {

        path => ["/data/dicompot/log/dicompot.log"]

        # codec => json

        type => "Dicompot"

    }



    # Ddospot

    file {

        path => ["/data/ddospot/log/*.log"]

        # codec => json

        type => "Ddospot"

    }



    # ElasticPot

    file {

        path => ["/data/elasticpot/log/elasticpot.json"]

        # codec => json

        type => "ElasticPot"

    }



    # # Endlessh

    # file {

    #     path => ["/data/endlessh/log/endlessh.log"]

    #     # codec => plain

    #     type => "Endlessh"

    # }



    # Glutton

    file {

        path => ["/data/glutton/log/glutton.log"]

        # codec => json

        type => "Glutton"

    }



    # Hellpot

    file {

        path => ["/data/hellpot/log/hellpot.log"]

        # codec => json

        type => "Hellpot"

    }



    # # Heralding

    # file {

    #     path => ["/data/heralding/log/auth.csv"]

    #     type => "Heralding"

    # }



    # Honeypots

    file {

        path => ["/data/honeypots/log/*.log"]

        # codec => json

        type => "Honeypots"

    }



    # Honeytrap

    file {

        path => ["/data/honeytrap/log/attackers.json"]

        # codec => json

        type => "Honeytrap"

    }



    # Ipphoney

    file {

        path => ["/data/ipphoney/log/ipphoney.json"]

        # codec => json

        type => "Ipphoney"

    }



    # Log4pot

    file {

        path => ["/data/log4pot/log/log4pot.log"]

        # codec => json

        type => "Log4pot"

    }



    # Mailoney

    file {

        path => ["/data/mailoney/log/commands.log"]

        # codec => json

        type => "Mailoney"

    }



    # Medpot

    file {

        path => ["/data/medpot/log/medpot.log"]

        # codec => json

        type => "Medpot"

    }



    # Redishoneypot

    file {

        path => ["/data/redishoneypot/log/redishoneypot.log"]

        # codec => json

        type => "Redishoneypot"

    }



    # Sentrypeer 

    file {

        path => ["/data/sentrypeer/log/sentrypeer.json"]

        # codec => json

        type => "Sentrypeer"

    }



    # Host NGINX

    file {

        path => ["/data/nginx/log/access.log"]

        # codec => json

        type => "NGINX"

    }



    # Tanner

    file {

        path => ["/data/tanner/log/tanner_report.json"]

        # codec => json

        type => "Tanner"

    }



}



filter {



    json {

		source => "message"

		target => "json_event"

	}



    # Fatt

    if [json_event][type] == "Fatt" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][sourceIp]" => "[json_event][src_ip]"

            "[json_event][destinationIp]" => "[json_event][dest_ip]"

            "[json_event][sourcePort]" => "[json_event][src_port]"

            "[json_event][destinationPort]" => "[json_event][dest_port]"

            "[json_event][gquic]" => "[json_event][fatt_gquic]"

            "[json_event][http]" => "[json_event][fatt_http]"

            "[json_event][rdp]" => "[json_event][fatt_rdp]"

            "[json_event][ssh]" => "[json_event][fatt_ssh]"

            "[json_event][tls]" => "[json_event][fatt_tls]"

        }

        }

    }



    # Suricata

    if [json_event][type] == "Suricata" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        translate {

        refresh_interval => 86400

        source => "[json_event][alert][signature_id]"

        target => "[json_event][alert][cve_id]"

        dictionary_path => "/etc/listbot/cve.yaml"

        }

    }



    # P0f

    if [json_event][type] == "P0f" {

        date {

        match => [ "[json_event][timestamp]", "yyyy'/'MM'/'dd HH:mm:ss" ]

        remove_field => ["[json_event][timestamp]"]

        }

        mutate {

        rename => {

            "[json_event][server_port]" => "[json_event][dest_port]"

            "[json_event][server_ip]" => "[json_event][dest_ip]"

            "[json_event][client_port]" => "[json_event][src_port]"

            "[json_event][client_ip]" => "[json_event][src_ip]"

        }

        }

    }



    # Adbhoney

    if [json_event][type] == "Adbhoney" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        remove_field => ["[json_event][unixtime]"]

        }

    }



    # Ciscoasa

    # if [json_event][type] == "Ciscoasa" {

    #     kv {

    #     remove_char_key => " '{}"

    #     remove_char_value => "'{}"

    #     value_split => ":"

    #     field_split => ","

    #     }

    #     date {

    #     match => [ "timestamp", "ISO8601" ]

    #     }

    #     mutate {

    #     add_field => {

    #         "dest_ip" => "${MY_EXTIP}"

    #     }

    #     }

    # }



    # CitrixHoneypot

    # if [json_event][type] == "CitrixHoneypot" {

    #     grok {

    #     match => {

    #         "message" => [ "\A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{JAVAMETHOD:http.http_method:string}%{SPACE}%{CISCO_REASON:fileinfo.state:string}: %{UNIXPATH:fileinfo.filename:string}",

    #                     "\A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{JAVAMETHOD:http.http_method:string}%{SPACE}%{CISCO_REASON:fileinfo.state:string}: %{GREEDYDATA:payload:string}",

    #                     "\A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{S3_REQUEST_LINE:msg:string} %{CISCO_REASON:fileinfo.state:string}: %{GREEDYDATA:payload:string:string}",

    #                     "\A\(%{IPV4:src_ip:string}:%{INT:src_port:integer}\): %{GREEDYDATA:msg:string}" ]

    #     }

    #     }

    #     date {

    #     match => [ "asctime", "ISO8601" ]

    #     remove_field => ["asctime"]

    #     remove_field => ["message"]

    #     }

    #     mutate {

    #     add_field => {

    #         "dest_port" => "443"

    #     }

    #     rename => {

    #         "levelname" => "level"

    #     }

    #     }

    # }



    # Conpot

    if [json_event][type] == "ConPot" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][dst_port]" => "[json_event][dest_port]"

            "[json_event][dst_ip]" => "[json_event][dest_ip]"

        }

        }

    }



    # Cowrie

    if [json_event][type] == "Cowrie" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][dst_port]" => "[json_event][dest_port]"

            "[json_event][dst_ip]" => "[json_event][dest_ip]"

        }

        }

    }



    # Ddospot

    if [json_event][type] == "Ddospot" {

        date {

        match => [ "[json_event][time]", "yyyy-MM-dd HH:mm:ss.SSSSSS" ]

        remove_field => ["[json_event][time]"]

        }

        if [json_event][path] == "/data/ddospot/log/chargenpot.log" {

        mutate {

            add_field => {

            "[json_event][dest_port]" => "19"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

            }

        }

        }

        if [json_event][path] == "/data/ddospot/log/dnspot.log" {

        mutate {

            add_field => {

            "[json_event][dest_port]" => "53"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

            }

        }

        }

        if [json_event][path] == "/data/ddospot/log/ntpot.log" {

        mutate {

            add_field => {

            "[json_event][dest_port]" => "123"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

            }

        }

        }

        if [json_event][path] == "/data/ddospot/log/ssdpot.log" {

        mutate {

            add_field => {

            "[json_event][dest_port]" => "1900"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

            }

        }

        }

    }



    # Dionaea

    if [json_event][type] == "Dionaea" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][dst_port]" => "[json_event][dest_port]"

            "[json_event][dst_ip]" => "[json_event][dest_ip]"

        }

        gsub => [

            "[json_event][src_ip]", "::ffff:", "",

            "[json_event][dest_ip]", "::ffff:", ""

        ]

        }

        if [json_event][credentials] {

        mutate {

            add_field => {

            "[json_event][username]" => "%{[credentials][username]}"

            "[json_event][password]" => "%{[credentials][password]}"

            }

            remove_field => "[json_event][credentials]"

        }

        }

    }



    # Dicompot

    if [json_event][type] == "Dicompot" {

        date {

        match => [ "[json_event][time]", "yyyy-MM-dd HH:mm:ss" ]

        remove_field => ["[json_event][time]"]

        remove_field => ["[json_event][timestamp]"]

        }

        mutate {

        rename => {

            "[json_event][ID]" => "[json_event][id]"

            "[json_event][IP]" => "[json_event][src_ip]"

            "[json_event][Port]" => "[json_event][src_port]"

            "[json_event][AETitle]" => "[json_event][aetitle]"

            "[json_event][Command]" => "[json_event][input]"

            "[json_event][Files]" => "[json_event][files]"

            "[json_event][Identifier]" => "[json_event][identifier]"

            "[json_event][Matches]" => "[json_event][matches]"

            "[json_event][Status]" => "[json_event][session]"

            "[json_event][Version]" => "[json_event][version]"

        }

        }

    }



    # ElasticPot

    if [json_event][type] == "ElasticPot" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][content_type]" => "[json_event][http.http_content_type]"

            "[json_event][dst_port]" => "[json_event][dest_port]"

            "[json_event][dst_ip]" => "[json_event][dest_ip]"

            "[json_event][message]" => "[json_event][event_type]"

            "[json_event][request]" => "[json_event][request_method]"

            "[json_event][user_agent]" => "[json_event][http_user_agent]"

            "[json_event][url]" => "[json_event][http.url]"

        }

        }

    }



    # Endlessh

    # Example: 2021-10-29T21:08:31.026Z CLOSE host=1.2.3.4 port=12345 fd=4 time=20.015 bytes=24

    # Example: 2021-10-29T21:08:11.011Z ACCEPT host=1.2.3.4 port=12346 fd=4 n=1/4096

    # if [json_event][type] == "Endlessh" {

    #     grok { match => { "message" => [ "\A%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{WORD:reason}%{SPACE}host=%{IPV4:src_ip}%{SPACE}port=%{INT:src_port}%{SPACE}fd=%{INT}%{SPACE}time=%{SECOND:duration}%{SPACE}bytes=%{NUMBER:bytes}", "\A%{TIMESTAMP_ISO8601:timestamp}%{SPACE}%{WORD:reason}%{SPACE}host=%{IPV4:src_ip}%{SPACE}port=%{INT:src_port}%{SPACE}fd=%{INT}%{SPACE}n=%{INT}/%{INT}" ] } }

    #     date {

    #     match => [ "timestamp", "ISO8601" ]

    #     remove_field => ["timestamp"]

    #     }

    #     mutate {

    #     add_field => {

    #         "dest_port" => "22"

    #         "dest_ip" => "${MY_EXTIP}"

    #     }

    #     }

    # }



    # Glutton

    if [json_event][type] == "Glutton" {

        date {

        match => [ "[json_event][ts]", "UNIX" ]

        remove_field => ["[json_event][ts]"]

        }

    }



    # Hellpot

    if [json_event][type] == "Hellpot" {

        date {

        match => [ "[json_event][time]", "ISO8601" ]

        remove_field => ["[json_event][time]"]

        remove_field => ["[json_event][timestamp]"]

        }

        mutate {

        add_field => {

            "[json_event][dest_port]" => "80"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

        }

        rename => {

            "[json_event][BYTES]" => "[json_event][bytes]"

            "[json_event][DURATION]" => "[json_event][duration]"

            "[json_event][REMOTE_ADDR]" => "[json_event][src_ip]"

            "[json_event][URL]" => "[json_event][url]"

            "[json_event][USERAGENT]" => "[json_event][http_user_agent]"

            "[json_event][message]" => "[json_event][reason]"

        }

        }

    }



    # Heralding

    # if [json_event][type] == "Heralding" {

    #     csv {

    #     columns => ["timestamp","auth_id","session_id","src_ip","src_port","dest_ip","dest_port","proto","username","password"] separator => ","

    #     }

    #     date {

    #     match => [ "timestamp", "yyyy-MM-dd HH:mm:ss.SSSSSS" ]

    #     remove_field => ["timestamp"]

    #     }

    # }



    # Honeypots

    if [json_event][type] == "Honeypots" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

    }



    # Honeytrap

    if [json_event][type] == "Honeytrap" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][attack_connection][local_port]" => "[json_event][dest_port]"

            "[json_event][attack_connection][local_ip]" => "[json_event][dest_ip]"

            "[json_event][attack_connection][remote_port]" => "[json_event][src_port]"

            "[json_event][attack_connection][remote_ip]" => "[json_event][src_ip]"

        }

        }

    }



    # Ipphoney

    if [json_event][type] == "Ipphoney" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][query]" => "[json_event][ipp_query]"

            "[json_event][content_type]" => "[json_event][http.http_content_type]"

            "[json_event][dst_port]" => "[json_event][dest_port]"

            "[json_event][dst_ip]" => "[json_event][dest_ip]"

            "[json_event][request]" => "[json_event][request_method]"

            "[json_event][operation]" => "[json_event][data]"

            "[json_event][user_agent]" => "[json_event][http_user_agent]"

            "[json_event][url]" => "[json_event][http.url]"

        }

        }

    }



    # Log4pot

    if [json_event][type] == "Log4pot" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][request]" => "[json_event][request_uri]"

            "[json_event][server_port]" => "[json_event][dest_port]"

            "[json_event][port]" => "[json_event][src_port]"

            "[json_event][client]" => "[json_event][src_ip]"

        }

        }

    }



    # Mailoney

    if [json_event][type] == "Mailoney" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        add_field => { "[json_event][dest_port]" => "25" }

        }

    }



    # Medpot

    if [json_event][type] == "Medpot" {

        mutate {

        add_field => {

            "[json_event][dest_port]" => "2575"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

        }

        }

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

    }



    # Redishoneypot

    if [json_event][type] == "Redishoneypot" {

        date {

        match => [ "[json_event][time]", "yyyy-MM-dd HH:mm:ss" ]

        remove_field => ["[json_event][time]"]

        remove_field => ["[json_event][timestamp]"]

        }

        mutate {

        split => { "[json_event][addr]" => ":" }

        add_field => {

            "[json_event][src_ip]" => "%{[json_event][json_event][[addr][0]}"

            "[json_event][src_port]" => "%{[json_event][json_event][[addr][1]}"

            "[json_event][dest_port]" => "6379"

            "[json_event][dest_ip]" => "${MY_EXTIP}"

        }

        remove_field => ["[json_event][addr]"]

        }

    }



    # NGINX

    if [json_event][type] == "NGINX" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][request]" => "[json_event][request_data]"

        }

        }

    }



    # Sentrypeer

    if [json_event][type] == "Sentrypeer" {

        date {

        match => [ "[json_event][event_timestamp]", "yyyy-MM-dd HH:mm:ss.SSSSSSSSS" ]

        remove_field => ["[json_event][event_timestamp]"]

        }

        mutate {

        rename => {

            "[json_event][source_ip]" => "[json_event][src_ip]"

            "[json_event][destination_ip]" => "[json_event][dest_ip]"

        }

        add_field => { "[json_event][dest_port]" => "5060" }

        }

    }



    # Tanner

    if [json_event][type] == "Tanner" {

        date {

        match => [ "[json_event][timestamp]", "ISO8601" ]

        }

        mutate {

        rename => {

            "[json_event][peer][ip]" => "[json_event][src_ip]"

            "[json_event][peer][port]" => "[json_event][src_port]"

        }

        add_field => { "[json_event][dest_port]" => "80" }

        }

    }



    # Drop if parse fails

    if "_grokparsefailure" in [tags] { drop {} }

    if "_jsonparsefailure" in [tags] { drop {} }



    # Add T-Pot hostname and external IP

    mutate {

        add_field => {

        "[json_event][t-pot_ip_ext]" => "${MY_EXTIP}"

        "[json_event][t-pot_ip_int]" => "${MY_INTIP}"

        "[json_event][t-pot_hostname]" => "${MY_HOSTNAME}"

        }

    }



    # Add geo coordinates / ASN info / IP rep.

    if [json_event][src_ip] {

        geoip {

        cache_size => 10000

        source => "[json_event][src_ip]"

        database => "/usr/share/logstash/vendor/bundle/jruby/2.6.0/gems/logstash-filter-geoip-7.2.12-java/vendor/GeoLite2-City.mmdb"

        }

        geoip {

        cache_size => 10000

        source => "[json_event][src_ip]"

        database => "/usr/share/logstash/vendor/bundle/jruby/2.6.0/gems/logstash-filter-geoip-7.2.12-java/vendor/GeoLite2-ASN.mmdb"

        }

        translate {

        refresh_interval => 86400

        source => "[json_event][src_ip]"

        target => "[json_event][ip_rep]"

        dictionary_path => "/etc/listbot/iprep.yaml"

        }

    }

    if [json_event][t-pot_ip_ext]  {

        geoip {

        cache_size => 10000

        source => "[json_event][t-pot_ip_ext]"

        target => "[json_event][geoip_ext]"

        database => "/usr/share/logstash/vendor/bundle/jruby/2.6.0/gems/logstash-filter-geoip-7.2.12-java/vendor/GeoLite2-City.mmdb"

        }

        geoip {

        cache_size => 10000

        source => "[json_event][t-pot_ip_ext]"

        target => "[json_event][geoip_ext]"

        database => "/usr/share/logstash/vendor/bundle/jruby/2.6.0/gems/logstash-filter-geoip-7.2.12-java/vendor/GeoLite2-ASN.mmdb"

        }

    }



    # In some rare conditions dest_port, src_port, status are indexed as string, forcing integer for now

    if [json_event][dest_port] {

        mutate {

            convert => { "[json_event][dest_port]" => "integer" }

        }

    }

    if [json_event][src_port] {

        mutate {

            convert => { "[json_event][src_port]" => "integer" }

        }

    }

    if [json_event][status] {

        mutate {

            convert => { "[json_event][status]" => "integer" }

        }

    }

    if [json_event][id] {

        mutate {

            convert => { "[json_event][id]" => "string" }

        }

    }

    if [json_event][request] {

        mutate {

            convert => { "[json_event][request]" => "string" }

        }

    }



    if [json_event][Type]=="NGINX" and "kibana" in [json_event][http_referer]{



		drop {}



	}



	if [json_event][DstPort]=="64297" or [json_event][DstPort]=="64295" or [json_event][DstPort]=="64294"{



		drop {}



	}



        if [json_event][Type]=="ElasticPot" {



                mutate {



                        remove_field => ["[json_event][eventid]"]



                }



        }



        if [json_event][Type]!="Tanner" {



                mutate {



                        remove_field => ["[json_event][path]"]



                }



        }

	if [json_event][Type]=="Mailoney" {

		mutate {

			add_field => {"lowercase_data" => "%{[json_event][data]}"}

		}

		if "mail from" in [lowercase_data] {

			mutate {

				rename => {"[json_event][smtp_input]" => "[json_event][email][from][address]"}

			}

		}

		if "rcpt to" in [lowercase_data] {

                        mutate {

                                rename => {"[json_event][smtp_input]" => "[json_event][email][to][address]"}

                        }

                }

		

	}





    	mutate {

                rename => {"[json_event][t-pot_ip_ext]" => "[json_event][decoy][ip][external]"}

                rename => {"[json_event][t-pot_ip_int]" => "[json_event][decoy][ip][internal]"}



		    # NGINX



                rename => {"[json_event][args]" => "[json_event][url][query]"}



                rename => {"[json_event][body_bytes_sent]" => "[json_event][http][request][body][bytes]"}



                rename => {"[json_event][bytes_sent]" => "[json_event][http][response][body][bytes]"}



                rename => {"[json_event][geoip_ext][as_org]" => "[json_event][decoy][as][organization][name]"}



                rename => {"[json_event][geoip_ext][asn]" => "[json_event][decoy][as][number]"}



                rename => {"[json_event][geoip_ext][city_name]" => "[json_event][decoy][geo][city_name]"}



                rename => {"[json_event][geoip_ext][continent_code]" => "[json_event][decoy][geo][continent_code]"}



                rename => {"[json_event][geoip_ext][country_code2]" => "[json_event][decoy][geo][country_iso_code]"}



                rename => {"[json_event][geoip_ext][country_name]" => "[json_event][decoy][geo][country_name]"}



                rename => {"[json_event][geoip_ext][location]" => "[json_event][decoy][geo][location]"}



                rename => {"[json_event][geoip_ext][postal_code]" => "[json_event][decoy][geo][postal_code]"}



                rename => {"[json_event][geoip_ext][region_code]" => "[json_event][decoy][geo][region_iso_code]"}



                rename => {"[json_event][geoip_ext][region_name]" => "[json_event][decoy][geo][region_name]"}



                rename => {"[json_event][geoip_ext][timezone]" => "[json_event][decoy][geo][timezone]"}                                 



                rename => {"[json_event][http_cf_ray]" => "[json_event][http][request][cf_ray]"}



                rename => {"[json_event][http_host]" => "[json_event][http][request][host]"}



                rename => {"[json_event][http_referer]" => "[json_event][http][request][referrer]"}



                rename => {"[json_event][http_user_agent]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][http_x_forwarded_for]" => "[json_event][client][ip]"}



                rename => {"[json_event][remote_user]" => "[json_event][client][user][name]"}



                rename => {"[json_event][request_data]" => "[json_event][http][request][body][content]"}



                rename => {"[json_event][request_id]" => "[json_event][http][request][id]"}



                rename => {"[json_event][request_length]" => "[json_event][http][request][bytes]"}



                rename => {"[json_event][request_method]" => "[json_event][http][request][method]"}



                rename => {"[json_event][request_time]" => "[json_event][http][request][time]"}



                rename => {"[json_event][request_uri]" => "[json_event][url][path]"}



                rename => {"[json_event][scheme]" => "[json_event][url][scheme]"}



                rename => {"[json_event][server_name]" => "[json_event][url][registered_domain]"}



                rename => {"[json_event][server_protocol]" => "[json_event][url][protocol]"}



                rename => {"[json_event][src_ip]" => "[json_event][source][ip]"}



                rename => {"[json_event][src_port]" => "[json_event][source][port]"}



                rename => {"[json_event][ssl_cipher]" => "[json_event][tls][cipher]"}



                rename => {"[json_event][ssl_protocol]" => "[json_event][tls][version_protocol]"}



                rename => {"[json_event][status]" => "[json_event][http][response][status_code]"}



                rename => {"[json_event][upstream]" => "[json_event][service][address]"}



                rename => {"[json_event][upstream_cache_status]" => "[json_event][service][cache][status]"}



                rename => {"[json_event][upstream_connect_time]" => "[json_event][service][connect][time]"}



                rename => {"[json_event][upstream_header_time]" => "[json_event][service][header][time]"}



                rename => {"[json_event][upstream_response_length]" => "[json_event][service][response][bytes]"}



                rename => {"[json_event][upstream_response_time]" => "[json_event][service][response][time]"}







                # P0f



                rename => {"[json_event][app]" => "[json_event][application][name]"}



                rename => {"[json_event][dest_ip]" => "[json_event][destination][ip]"}



                rename => {"[json_event][DestPort]" => "[json_event][destination][port]"}



                rename => {"[json_event][geoip][as_org]" => "[json_event][as][organization][name]"}



                rename => {"[json_event][geoip][asn]" => "[json_event][as][number]"}



                rename => {"[json_event][geoip][city_name]" => "[json_event][geo][city_name]"}



                rename => {"[json_event][geoip][continent_code]" => "[json_event][geo][continent_code]"}



                rename => {"[json_event][geoip][country_code2]" => "[json_event][geo][country_iso_code]"}



                rename => {"[json_event][geoip][country_name]" => "[json_event][geo][country_name]"}



                rename => {"[json_event][geoip][location]" => "[json_event][geo][location]"}



                rename => {"[json_event][geoip][postal_code]" => "[json_event][geo][postal_code]"}



                rename => {"[json_event][geoip][region_code]" => "[json_event][geo][region_iso_code]"}



                rename => {"[json_event][geoip][region_name]" => "[json_event][geo][region_name]"}



                rename => {"[json_event][geoip][timezone]" => "[json_event][geo][timezone]"}



                rename => {"[json_event][ip_rep]" => "[json_event][client][ip_reputation]"}



                rename => {"[json_event][lang]" => "[json_event][http][request][language]"}



                rename => {"[json_event][mod]" => "[json_event][log][type]"}



                rename => {"[json_event][subject]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][link]" => "[json_event][client][link]"}



                rename => {"[json_event][os]" => "[json_event][client][os][name]"}



                rename => {"[json_event][raw_freq]" => "[json_event][client][frequency]"}



                rename => {"[json_event][raw_hits]" => "[json_event][client][hits]"}



                rename => {"[json_event][raw_mtu]" => "[json_event][client][mtu]"}



                rename => {"[json_event][reason]" => "[json_event][event][reason]"}







                # Dionaea



                rename => {"[json_event][connection][protocol]" => "[json_event][network][protocol]"}



                rename => {"[json_event][connection][transport]" => "[json_event][network][transport]"}



                rename => {"[json_event][connection][type]" => "[json_event][event][action]"}



                rename => {"[json_event][src_hostname]" => "[json_event][source][address]"}



                rename => {"[json_event][username]" => "[json_event][user][name]"}



                rename => {"[json_event][password]" => "[json_event][user][password]"}







                # Fatt



                rename => {"[json_event][fatt_tls][ja3s]" => "[json_event][tls][server][ja3s]"}



                rename => {"[json_event][protocol]" => "[json_event][network][protocol]"}



                rename => {"[json_event][fatt_http][contentLength]" => "[json_event][http][response][body][bytes]"}



                rename => {"[json_event][fatt_http][responseCode]" => "[json_event][http][response][status_code]"}



                # rename => {"[fatt_http][responseVersion]" => "[json_event][]"}   # HTTP/1][1



                rename => {"[json_event][fatt_http][server]" => "[json_event][http][server]"}



                rename => {"[json_event][fatt_http][serverHeaderHash]" => "[json_event][http][response][header_hash]"}



                rename => {"[json_event][fatt_http][serverHeaderOrder]" => "[json_event][http][response][header_order]"}



                rename => {"[json_event][fatt_tls][ja3]" => "[json_event][tls][client][ja3]"}



                rename => {"[json_event][fatt_tls][serverName]" => "[json_event][server][address]"}



                rename => {"[json_event][fatt_http][clientHeaderHash]" => "[json_event][http][request][header_hash]"}



                rename => {"[json_event][fatt_http][clientHeaderOrder]" => "[json_event][http][request][header_order]"}



                rename => {"[json_event][fatt_http][requestFullURI]" => "[json_event][url][original]"}



                rename => {"[json_event][fatt_http][requestMethod]" => "[json_event][http][request][method]"}



                rename => {"[json_event][fatt_http][requestURI]" => "[json_event][url][path]"}



                rename => {"[json_event][fatt_http][userAgent]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][fatt_ssh][client]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][fatt_ssh][hassh]" => "[json_event][client][fingerprint]"}



                rename => {"[json_event][fatt_ssh][hasshServer]" => "[json_event][server][fingerprint]"}



                rename => {"[json_event][fatt_ssh][server]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][fatt_rdp][clientName]" => "[json_event][client][name]"}







                # Suricata



                rename => {"[json_event][alert][action]" => "[json_event][event][action]"}



                rename => {"[json_event][alert][category]" => "[json_event][threat][indicator][description]"}



                rename => {"[json_event][alert][severity]" => "[json_event][event][risk_score]"}



                rename => {"[json_event][alert][signature]" => "[json_event][threat][enrichments][matched][id]"}



                rename => {"[json_event][alert][signature_id]" => "[json_event][threat][enrichments][matched][type]"}



                rename => {"[json_event][flow][bytes_toclient]" => "[json_event][destination][bytes]"}



                rename => {"[json_event][flow][bytes_toserver]" => "[json_event][source][bytes]"}



                rename => {"[json_event][flow][pkts_toclient]" => "[json_event][destination][packets]"}



                rename => {"[json_event][flow][pkts_toserver]" => "[json_event][source][packets]"}



                rename => {"[json_event][flow][start]" => "[json_event][event][start]"}



                rename => {"[json_event][flow_id]" => "[json_event][session][id]"}



                rename => {"[json_event][in_iface]" => "[json_event][interface][name]"}



                #rename => {"[proto]" => "[json_event][]"}  # network][transport



                rename => {"[json_event][alert][cve_id]" => "[json_event][vulnerability][id]"}



                rename => {"[json_event][alert][metadata][former_category]" => "[json_event][log][type]"}



                rename => {"[json_event][alert][metadata][signature_severity]" => "[json_event][log][severity]"}



                rename => {"[json_event][app_proto]" => "[json_event][network][protocol]"}



                # rename => {"[event_type]" => "[json_event][]"}  #network][protocol



                #rename => {"[rdp][event_type]" => "[json_event][]"}



                rename => {"[json_event][sip][method]" => "[json_event][network][protocol]"}



                rename => {"[json_event][sip][request_line]" => "[json_event][source][address]"}



                rename => {"[json_event][sip][uri]" => "[json_event][url][original]"}



                rename => {"[json_event][ssh][client][hassh][hash]" => "[json_event][client][fingerprint]"}



                #rename => {"[ssh][client][software_version]" => "[json_event][]"}



                rename => {"[json_event][ssh][server][hassh][hash]" => "[json_event][server][fingerprint]"}



                #rename => {"[ssh][server][software_version]" => "[json_event][]"}



                rename => {"[json_event][tls][ja3][hash]" => "[json_event][tls][client][ja3]"}



                rename => {"[json_event][tls][ja3s][hash]" => "[json_event][tls][server][ja3]"}



                rename => {"[json_event][http][hostname]" => "[json_event][server][name]"}



                #rename => {"[http][http_content_type]" => "[json_event][]"}



                rename => {"[json_event][http][http_user_agent]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][fileinfo][filename]" => "[json_event][file][name]"}



                rename => {"[json_event][fileinfo][magic]" => "[json_event][file][type]"}



                rename => {"[json_event][fileinfo][md5]" => "[json_event][file][hash][md5]"}



                rename => {"[json_event][fileinfo][size]" => "[json_event][file][size]"}







                # Cowrie



                rename => {"[json_event][hassh]" => "[json_event][client][fingerprint]"}



                #rename => {"[hasshAlgorithms]" => "[json_event][]"}



                rename => {"[json_event][version]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][input]" => "[json_event][process][command_line]"}



                rename => {"[json_event][outfile]" => "[json_event][destination][file][name]"}



                rename => {"[json_event][shasum]" => "[json_event][file][hash][sha256]"}



                rename => {"[json_event][url]" => "[json_event][url][original]"}



                #rename => {"[destfile]" => "[json_event][]"}



                rename => {"[eventid]" => "[json_event][message]"}  # Cowrie event reason][][][Strip cowrie][







                # Sentrypeer



                rename => {"[sip_message]" => "[json_event][message]"}



                rename => {"[json_event][sip_method]" => "[json_event][network][protocol]"}



                rename => {"[json_event][sip_user_agent]" => "[json_event][user_agent][original]"}



                rename => {"[json_event][called_number]" => "[json_event][destination][address]"}



                #rename => {"[collected_method]" => "[json_event][]"}







                # Adbhoney



                rename => {"[eventid]" => "[json_event][message]"}     #abdhoney][ Strip



                rename => {"[json_event][filename]" => "[json_event][file][name]"}



                rename => {"[json_event][src_url]" => "[json_event][source][address]"}







                # Tanner



                #rename => {"[headers][accept]" => "[json_event][]"}



                #rename => {"[headers][accept-encoding]" => "[json_event][]"}



                rename => {"[json_event][headers][accept-language]" => "[json_event][http][request][language]"}



                rename => {"[json_event][headers][connection]" => "[json_event][event][action]"}



                rename => {"[json_event][headers][content-length]" => "[json_event][http][request][body][bytes]"}



                #rename => {"[headers][content-type]" => "[json_event][]"}



                rename => {"[json_event][headers][host]" => "[json_event][http][request][host]"}



                rename => {"[json_event][headers][origin]" => "[json_event][url][original]"}



                rename => {"[json_event][headers][referer]" => "[json_event][http][request][referrer]"}



                #rename => {"[headers][upgrade-insecure-requests]" => "[json_event][]"}



                rename => {"[json_event][headers][user-agent]" => "[json_event][user_agent][original]"}



                #rename => {"[post_data][psd]" => "[json_event][]"}



                rename => {"[json_event][method]" => "[json_event][http][request][method]"}



                rename => {"[json_event][post_data][username]" => "[json_event][user][name]"}



                rename => {"[json_event][response_msg][response][message][detection][name]" => "[json_event][threat][indicator][name]"}



                rename => {"[json_event][path]" => "[json_event][url][path]"}     # URI in Tanner



                rename => {"[json_event][headers][authorization]" => "[json_event][http][request][authorization]"}



                rename => {"[json_event][cookies][Authorization]" => "[json_event][http][request][authorization]"}



                #rename => {"[headers][x-requested-with]" => "[json_event][]"}







                # Cisco ASA



                rename => {"[json_event][payload_printable]" => "[json_event][http][request][body][content]"}







                # Heralding



                rename => {"[json_event][proto]" => "[json_event][network][protocol]"}







                # Citrix Honeypot



                # rename => {"[fileinfo][filename]" => "[json_event][file][name]"}



                #rename => {"[fileinfo][state]" => "[json_event][]"}



                rename => {"[json_event][http][http_method]" => "[json_event][http][request][method]"}



                rename => {"[json_event][payload]" => "[json_event][http][request][body][content]"}



                rename => {"[json_event][http][url]" => "[json_event][url][path]"}



                rename => {"[event_type]" => "[json_event][message]"}







                # Mailoney



                # mail from, rcpt to  -- in data



                #rename => {"[smtp_input]" => "[json_event][]"}



                rename => {"[data]" => "[json_event][message]"}







                # Conpot



                rename => {"[json_event][data_type]" => "[json_event][network][protocol]"}    #Protocol



                #rename => {"[json_event][request]" => "[json_event][]"}



                #rename => {"[json_event][response]" => "[json_event][]"}







                # Dicompot



                rename => {"[msg]" => "[json_event][message]"}







                # ssh-rsa



                rename => {"[eventid]" => "[json_event][message]"}      # Strip cowrie][,  elasticpot][



                rename => {"[json_event][fingerprint]" => "[json_event][client][fingerprint]"}







                # Honeytrap



                rename => {"[json_event][attack_connection][payload][data_hex]" => "[json_event][http][request][body][hex]"}



                rename => {"[json_event][attack_connection][payload][length]" => "[json_event][http][request][body][bytes]"}



                rename => {"[json_event][attack_connection][payload][md5_hash]" => "[json_event][http][request][body][hash][md5]"}



                rename => {"[json_event][attack_connection][payload][sha512_hash]" => "[json_event][http][request][body][hash][sha512]"}



                rename => {"[json_event][attack_connection][protocol]" => "[json_event][network][transport]"}



                rename => {"[json_event][proxy_connection][local_ip]" => "[json_event][server][ip]"}



                rename => {"[json_event][proxy_connection][local_port]" => "[json_event][server][port]"}



                rename => {"[json_event][proxy_connection][payload][data_hex]" => "[json_event][network][forwarded][request][body][hex]"}



                rename => {"[json_event][proxy_connection][payload][length]" => "[json_event][network][forwarded][request][body][bytes]"}



                rename => {"[json_event][proxy_connection][payload][md5_hash]" => "[json_event][network][forwarded][request][body][hash][md5]"}



                rename => {"[json_event][proxy_connection][payload][sha512_hash]" => "[json_event][network][forwarded][request][body][hash][sha256]"}



                rename => {"[json_event][proxy_connection][protocol]" => "[json_event][network][protocol]"}  #example -ip



                rename => {"[json_event][proxy_connection][remote_ip]" => "[json_event][client][ip]"}



                rename => {"[json_event][proxy_connection][remote_port]" => "[json_event][client][port]"}

        }







        mutate {



                gsub => ["[json_event][eventid]","cowrie.",""]



                gsub => ["[json_event][eventid]","adbhoney.",""]



                gsub => ["[json_event][eventid]","elasticpot.",""]



                gsub => ["[json_event][alert][signature]","SURICATA ",""]



                rename => {"[json_event][fatt_http]" => "http"}



                rename => {"[json_event][fatt_tls]" => "tls"}



                rename => {"[json_event][fatt_ssh]" => "ssh"}



                rename => {"[json_event][fatt_rdp]" => "rdp"}



                #rename => {"" => ""}



        }





	if "kibana" in [url][original][path] {
		drop {}
	}

	mutate {
		rename => {"[json_event][dest_port]" => "[destination][port]"}
		rename => {"[json_event][client_ip]" => "[json_event][client][ip]"}
		rename => {"[json_event][client_port]" => "[json_event][client][port]"}
		rename => {"[json_event][server_ip]" => "[json_event][server][ip]"}
		rename => {"[json_event][server_port]" => "[json_event][server][port]"}
	}



        mutate {



		remove_field => ["message","[json_event][t-pot_hostname]","[json_event][path]","[json_event][geoip_ext][country_code3]","[json_event][geoip_ext][latitude]","[json_event][geoip_ext][longitude]","[json_event][host]","[json_event][Country]","[geoip][latitude]","[geoip][longitude]","[json_event][sensorid]","[json_event][sensor]","[json_event][alert][metadata][created_at]","[json_event][alert][metadata][updated_at]","T-Pot Hostname"]



	}





}



# Output section

output {

#   elasticsearch {

#     hosts => ["elasticsearch:9200"]

#     # With templates now being legacy we need to set the daily index with its template manually. Otherwise a new index might be created with differents settings configured through Kibana.

#     index => "logstash-%{+YYYY.MM.dd}"

#     template => "/etc/logstash/tpot-template.json"

#     template_overwrite => "true"

#   }



    http {

        format => "json"

        http_method => "post"

        url => "https://prd-p-w8hdh.splunkcloud.com:8088/services/collector/event"

        headers => ["Authorization", "Splunk 6bf676da-f7a8-4c93-abce-4847b0c8eda3"]

        mapping => {"event" => "%{[json_event]}"}

        ssl_verification_mode => none

	}


	#udp {
		#host => "172.23.0.6"
		#port => "6050"
		#codec => json_lines
	#}
		#http {
			#format => "json"
                	#cacert => ["/etc/filebeat/rootCA.pem"]
                	#client_cert => "/etc/filebeat/hydra_collector_agent.crt"
                	#client_key => "/etc/filebeat/hydra_collector_agent.key"
                	#ssl_verification_mode => "full"
			#ssl_supported_protocols => "TLSv1.2"
			#mapping => {"event" => "%{[json_event]}"}
		#}
		file {
   			path => "/etc/logstash/fbeatip.json"
   			#codec => json
		}


}
